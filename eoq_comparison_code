import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import norm

np.random.seed(42)

days = 365
order_cost = 50
holding_cost = 2
unit_cost = 20
service_level = 0.95
z = norm.ppf(service_level)

mean_demand = 40
std_demand = 8
demand = np.random.normal(mean_demand, std_demand, days).clip(min=1)

lead_time = 5
lead_time_std = 2

results = {'Model': [], 'Total Cost': [], 'Avg Inventory': [], 'Stockouts': []}

D = demand.sum()
Q_classical = int(np.sqrt(2 * D * order_cost / holding_cost))
inventory = Q_classical
stockouts = 0
total_cost = 0
inventory_trace = []

for t in range(days):
    daily_demand = demand[t]
    inventory -= daily_demand
    if inventory < 0:
        stockouts += 1
        inventory = 0
    if t % (Q_classical // int(mean_demand)) == 0:
        total_cost += order_cost
        inventory += Q_classical
    inventory_trace.append(inventory)
    total_cost += inventory * holding_cost / days

results['Model'].append('Classical EOQ')
results['Total Cost'].append(round(total_cost, 2))
results['Avg Inventory'].append(round(np.mean(inventory_trace), 2))
results['Stockouts'].append(stockouts)

safety_stock = z * std_demand * np.sqrt(lead_time)
Q_prob = Q_classical
reorder_point = lead_time * mean_demand + safety_stock
inventory = Q_prob
stockouts = 0
total_cost = 0
inventory_trace = []

for t in range(days):
    daily_demand = demand[t]
    inventory -= daily_demand
    if inventory < 0:
        stockouts += 1
        inventory = 0
    if inventory < reorder_point:
        total_cost += order_cost
        inventory += Q_prob
    inventory_trace.append(inventory)
    total_cost += inventory * holding_cost / days

results['Model'].append('Probabilistic EOQ')
results['Total Cost'].append(round(total_cost, 2))
results['Avg Inventory'].append(round(np.mean(inventory_trace), 2))
results['Stockouts'].append(stockouts)

lead_times = np.random.normal(loc=lead_time, scale=lead_time_std, size=days).clip(min=1)
demand_mean = np.mean(demand)
demand_std = np.std(demand)
cov_DL = np.cov(demand[:days], lead_times[:days])[0, 1]

var_D = demand_std ** 2
var_L = lead_time_std ** 2
adjusted_safety_stock = z * np.sqrt(var_D * lead_time + var_L * demand_mean ** 2 + 2 * cov_DL)

reorder_point = demand_mean * lead_time + adjusted_safety_stock
Q_ai = Q_classical
inventory = Q_ai
stockouts = 0
total_cost = 0
inventory_trace = []

for t in range(days):
    daily_demand = demand[t]
    inventory -= daily_demand
    if inventory < 0:
        stockouts += 1
        inventory = 0
    if inventory < reorder_point:
        total_cost += order_cost
        inventory += Q_ai
    inventory_trace.append(inventory)
    total_cost += inventory * holding_cost / days

results['Model'].append('AI-based EOQ')
results['Total Cost'].append(round(total_cost, 2))
results['Avg Inventory'].append(round(np.mean(inventory_trace), 2))
results['Stockouts'].append(stockouts)

df_results = pd.DataFrame(results)
print(df_results)

df_results.plot(x='Model', y=['Total Cost', 'Avg Inventory', 'Stockouts'], kind='bar', figsize=(10,6))
plt.title("Comparison of Inventory Models")
plt.ylabel("Metric Value")
plt.xticks(rotation=0)
plt.grid(True)
plt.tight_layout()
plt.savefig("results/EOQ_Model_Comparison.png")
plt.show()
